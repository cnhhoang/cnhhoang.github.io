import { useEffect, useState } from "react";
import { LabBarChart, LabPieChart } from "~/lib/burp-lab-chart";
import { HydrateFallback, useLoading } from "~/root";
import { useTerminal } from "./portfolio";

// ====================================================================================================

//****************************************************************************************************
export default function WebPentest()
{
    const [labProgress, setLabProgress] = useState([
        {
          title: "Apprentice",
          solved: 0,
          total: 59,
          color: "SpringGreen",
        },
        {
          title: "Practitioner",
          solved: 0,
          total: 171,
          color: "DodgerBlue",
        },
        {
          title: "Expert",
          solved: 0,
          total: 39,
          color: "MediumOrchid",
        },
    ]);     
    const setTerminalDisabled = useTerminal();
    const setLoading = useLoading();

    /// Database loading
    const [error, setError] = useState(null);
  
    useEffect(() => {
        setLoading(true);
        setTerminalDisabled(true);

        fetch(
          "https://vercel-api-git-main-hoang-chungs-projects.vercel.app/api/getData"
        )
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          })
          .then((data) => {
            setLabProgress(data);
            setLoading(false); // Data fetching complete
            setTerminalDisabled(false);
          })
          .catch((error) => {
            console.error("Error fetching data:", error);
            setError(error);
            setLoading(false); // Stop loading even if there's an error
            setTerminalDisabled(false);
          });

        return () => { 
            setLoading(false);
            setTerminalDisabled(false);
        };
      }, []);   

    /// Data processing
    const { solvedTotal, overallTotal } = labProgress.reduce(
        (acc, { solved, total }) => ({
          solvedTotal: acc.solvedTotal + solved,
          overallTotal: acc.overallTotal + total,
        }),
        { solvedTotal: 0, overallTotal: 0 }
      );

      
    /// RETURN    
    if (error) {
        return (
            <div className="h-full w-full flex items-center justify-center">
            <div className="text-xl text-red-500">
                Error fetching data: {error}
            </div>
            </div>
            );
    }

    return (    
        <div className="h-full w-full">
            <div className="text-2xl text-white">
                Level progress
            </div>
            <div className="h-full w-full flex items-center justify-center">
                {
                    labProgress.map((entry) => (
                        <LabPieChart solve={entry.solved} total={entry.total} title={entry.title} color={entry.color}/>
                    ))
                }
            </div>
            
            {/* --------------------- */}
            <div className="text-2xl text-white mb-5">
                Total lab progress
            </div>
            <div className="h-full w-full flex items-center justify-center">
                <LabBarChart solved={solvedTotal} total={overallTotal} />
            </div>
        </div>
    );
}